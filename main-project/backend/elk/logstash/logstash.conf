input {
    jdbc {
        # ##### 1단계 방식 ##### => 매번 똑같은 데이터를 계속 가지고 옴
        # jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
        # jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        # jdbc_connection_string => "jdbc:mysql://my-database:3306/mydocker04"
        # jdbc_user => "root"
        # jdbc_password => "root"
        # schedule => "* * * * *" # 매 분(1분) 마다 한번씩 가지고 와 줘
        # # schedule => "5 3 1 2 *" # 매년 2월 1일 3시 5분에 실행시켜줘
        # statement => "select * from product"

        ##### 2단계 방식 #####
        # jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
        # jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        # jdbc_connection_string => "jdbc:mysql://my-database:3306/mydocker04"
        # jdbc_user => "root"
        # jdbc_password => "root"
        # schedule => "* * * * *"
        # use_column_value => "true"
        # tracking_column => "updatedat"
        # tracking_column_type => "timestamp"
        # last_run_metadata_path => "./aaa.txt"
        # statement => "select id, name, price, updatedat from product where updatedat > :sql_last_value order by updatedat asc"

        ##### 3단계 방식 #####
        jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_connection_string => "jdbc:mysql://my-database:3306/mydocker04"
        jdbc_user => "root"
        jdbc_password => "root"
        schedule => "* * * * *"
        use_column_value => "true"
        tracking_column => "updatedat"
        tracking_column_type => "numeric"
        last_run_metadata_path => "./lastupdatedat.txt"
        # statement => "select *, unix_timestamp(updatedat) as updatedat from product where (unix_timestamp(updatedat) > :sql_last_value AND updatedat < NOW()) order by updatedat asc"
        statement => "select *, unix_timestamp(updatedat) as updatedat from product where unix_timestamp(updatedat) > :sql_last_value order by updatedat asc"
    }
}

filter {
  mutate {
    copy => { "id" => "[@metadata][_id]"}
    remove_field => ["id", "@version", "updatedat"]
  }
}

output {
    elasticsearch {
        hosts => "elasticsearch:9200"
        index => "myproduct04"
        document_id => "%{[@metadata][_id]}"
    }
}